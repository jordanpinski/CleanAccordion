{"version":3,"sources":["scripts.js","components/clean-accordion.js"],"names":["document","addEventListener","event","window","NodeList","prototype","forEach","CleanAccordion","cleanAccordionGroups","arguments","length","undefined","options","_classCallCheck","this","_objectSpread","_name","_version","singleOpen","beforeOpen","afterOpen","beforeClose","afterClose","debounce","handleResize","bind","_this","cleanAccordion","accordion","handleAccordionClick","target","parentNode","hasAttribute","openClose","_this2","cleanAccordionGroup","querySelectorAll","calculateContentHeight","content","classList","contains","close","open","height","_this3","Array","slice","call","children","child","contents","tempHeight","childChildren","childNode","getComputedHeight","style","maxHeight","concat","element","computedStyle","getComputedStyle","marginTop","replace","parseInt","marginBottom","closeAll","querySelector","add","scrollHeight","remove","resetContentHeight","accordionGroup","dataOptions","getDataOptions","_this4","JSON","parse","dataset","func","wait","immediate","timeout","context","args","accordions","apply","callNow"],"mappings":"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","file":"clean-accordion.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function(event) {\r\n\r\n  // Polyfills\r\n  if (window.NodeList && !NodeList.prototype.forEach) {\r\n    NodeList.prototype.forEach = Array.prototype.forEach;\r\n  }\r\n\r\n});\r\n","/**\r\n * Entry point to the plugin.\r\n */\r\nclass CleanAccordion {\r\n  constructor(cleanAccordionGroups = [], options = {}) {\r\n    this.cleanAccordionGroups = cleanAccordionGroups;\r\n    if (this.cleanAccordionGroups.length <= 0) return;\r\n\r\n    const defaultOptions = {\r\n      _name: \"CleanAccordion\",\r\n      _version: \"1.0.0\",\r\n      singleOpen: true,                 // Should only one accordion be open at a time?\r\n      beforeOpen: (accordion) => {},\r\n      afterOpen: (accordion) => {},\r\n      beforeClose: (accordion) => {},\r\n      afterClose: (accordion) => {}\r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...options }\r\n    this.handleResize = this.debounce(this.handleResize.bind(this), 100);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.bindEvents();\r\n  }\r\n\r\n  bindEvents() {\r\n\r\n    // cleanAccordionGroup click events\r\n    this.cleanAccordionGroups.forEach( (cleanAccordion) => {\r\n      cleanAccordion.addEventListener('click', (event) => { this.handleAccordionClick(event) });\r\n    });\r\n\r\n    // Resizing\r\n    window.addEventListener('resize', () => { this.handleResize() })\r\n  }\r\n\r\n  handleAccordionClick(event) {\r\n    let target = event.target;\r\n    let accordion = target.parentNode\r\n\r\n    // 1. Check if the title was clicked\r\n    if (target.hasAttribute('data-title')) {\r\n\r\n      // 2. Open/Close the accordion\r\n      this.openClose(accordion);\r\n\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    this.cleanAccordionGroups.forEach( (cleanAccordionGroup) => {\r\n      const contents = cleanAccordionGroup.querySelectorAll('[data-content]');\r\n      contents.forEach( content => {\r\n        this.calculateContentHeight(content);\r\n      });\r\n    });\r\n  }\r\n\r\n  openClose(accordion) {\r\n    if (accordion.classList.contains('open')) {\r\n      this.close(accordion);\r\n    } else {\r\n      this.open(accordion);\r\n    }\r\n  }\r\n\r\n  // TODO: Refactor this.\r\n  calculateContentHeight(content) {\r\n    if (!content.parentNode.classList.contains('open')) return;\r\n    let height = 0;\r\n\r\n    const children = Array.prototype.slice.call(content.children);\r\n\r\n    // 1. Loop through each child and get the computed height.\r\n    children.forEach( (child) => {\r\n\r\n      // 2. If the child has children calculate the height of all it's children.\r\n      if (child.children.length > 0) {\r\n        const childChildren = Array.prototype.slice.call(child.children);\r\n        let tempHeight = 0;\r\n\r\n        childChildren.forEach( (childNode) => {\r\n          tempHeight += this.getComputedHeight(childNode);\r\n        });\r\n\r\n        height += tempHeight;\r\n      } else {\r\n        height += this.getComputedHeight(child);\r\n      }\r\n\r\n    });\r\n      \r\n    content.style.maxHeight = `${height}px`;\r\n  }\r\n  \r\n  /**\r\n   * Returns the computed height including margin of the passed element\r\n   * @param {object} element \r\n   */\r\n  getComputedHeight(element) {\r\n    let height = element.scrollHeight\r\n    let computedStyle = window.getComputedStyle(element);\r\n    let marginTop = parseInt(computedStyle.marginTop.replace('px', ''));\r\n    let marginBottom = parseInt(computedStyle.marginBottom.replace('px', ''));\r\n    return height + marginTop + marginBottom;\r\n  }\r\n\r\n  resetContentHeight(content) {\r\n    content.style.maxHeight = '';\r\n  }\r\n\r\n  /**\r\n   * Open an accordion\r\n   * @param {*} accordion The accordion to open \r\n   */\r\n  open(accordion) {\r\n    // 1. beforeOpen callback\r\n    this.options.beforeOpen(accordion);\r\n\r\n    // 2. Check option conditionals.\r\n    this.closeAll(accordion);\r\n\r\n    // 3. Open accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.add('open');\r\n    this.calculateContentHeight(content);\r\n    \r\n    // 4. afterOpen callback\r\n    this.options.afterOpen(accordion);\r\n  }\r\n\r\n  /**\r\n   * Close an accordion\r\n   * @param {*} accordion The accordion to close\r\n   */\r\n  close(accordion) {\r\n\r\n    // 1. beforeClose callback\r\n    this.options.beforeClose(accordion);\r\n\r\n    // 2. Close accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.remove('open');\r\n    this.resetContentHeight(content);\r\n\r\n    // 3. afterClose callback\r\n    this.options.afterClose(accordion);\r\n  }\r\n\r\n  /**\r\n   * Closes each accordion.\r\n   * @param {*} accordion The current accordion.\r\n   */\r\n  closeAll(accordion) {\r\n\r\n    // 1. Check if data options were passed.\r\n    let accordionGroup = accordion.parentNode;\r\n    let dataOptions = this.getDataOptions(accordionGroup);\r\n\r\n    if ('singleOpen' in dataOptions) {\r\n      if (dataOptions.singleOpen === false) return;\r\n    } else {\r\n      if (!this.options.singleOpen) return;\r\n    }\r\n\r\n    // 2. Proceed closing accordions\r\n    let accordions = accordionGroup.querySelectorAll('[data-accordion]');\r\n\r\n    accordions.forEach( (accordion) => {\r\n      this.close(accordion);\r\n    });\r\n  }\r\n\r\n  getDataOptions(accordionGroup) {\r\n    let dataOptions = {};\r\n    if (accordionGroup.hasAttribute('data-options')) {\r\n      dataOptions = JSON.parse(accordionGroup.dataset.options);\r\n    }\r\n    return dataOptions;\r\n  }\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  debounce(func, wait, immediate) {\r\n    var timeout;\r\n    return function() {\r\n      var context = this, args = arguments;\r\n      var later = function() {\r\n        timeout = null;\r\n        if (!immediate) func.apply(context, args);\r\n      };\r\n      var callNow = immediate && !timeout;\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n      if (callNow) func.apply(context, args);\r\n    };\r\n  };\r\n}"]}
{"version":3,"sources":["scripts.js","components/clean-accordion.js"],"names":["document","addEventListener","event","window","NodeList","prototype","forEach","CleanAccordion","cleanAccordionGroups","arguments","length","undefined","options","_classCallCheck","this","_objectSpread","_name","_version","singleOpen","beforeOpen","afterOpen","beforeClose","afterClose","debounce","handleResize","bind","openClose","init","bindEvents","_this","accordion","handleAccordionClick","defaultOptions","target","parentNode","cleanAccordion","cleanAccordionGroup","querySelectorAll","content","_this2","calculateContentHeight","classList","contains","close","open","hasAttribute","style","maxHeight","concat","scrollHeight","tempContent","closest","element","height","computedStyle","getComputedStyle","parseInt","marginTop","replace","marginBottom","closeAll","querySelector","add","remove","resetContentHeight","accordionGroup","dataOptions","getDataOptions","_this3","JSON","parse","dataset","func","wait","immediate","timeout","context","args","callNow","clearTimeout","setTimeout","apply","accordions"],"mappings":"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","file":"clean-accordion.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function(event) {\r\n\r\n  // Polyfills\r\n  if (window.NodeList && !NodeList.prototype.forEach) {\r\n    NodeList.prototype.forEach = Array.prototype.forEach;\r\n  }\r\n\r\n});\r\n","// TODO: Add aria support\r\n// TODO: Add support for nested accordions\r\n\r\n/**\r\n * Entry point to the plugin.\r\n */\r\nclass CleanAccordion {\r\n  constructor(cleanAccordionGroups = [], options = {}) {\r\n    this.cleanAccordionGroups = cleanAccordionGroups;\r\n    if (this.cleanAccordionGroups.length <= 0) return;\r\n\r\n    const defaultOptions = {\r\n      _name: \"CleanAccordion\",\r\n      _version: \"1.0.0\",\r\n      singleOpen: true,                 // Should only one accordion be open at a time?\r\n      beforeOpen: (accordion) => {},\r\n      afterOpen: (accordion) => {},\r\n      beforeClose: (accordion) => {},\r\n      afterClose: (accordion) => {}\r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...options }\r\n    this.handleResize = this.debounce(this.handleResize.bind(this), 100);\r\n    this.openClose = this.debounce(this.openClose.bind(this), 100);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.bindEvents();\r\n  }\r\n\r\n  bindEvents() {\r\n\r\n    // cleanAccordionGroup click events\r\n    this.cleanAccordionGroups.forEach( (cleanAccordion) => {\r\n      cleanAccordion.addEventListener('click', (event) => { this.handleAccordionClick(event) });\r\n    });\r\n\r\n    // Resizing\r\n    window.addEventListener('resize', () => { this.handleResize() })\r\n  }\r\n\r\n  // TODO: Event is being called more than once when a nested accordion\r\n  handleAccordionClick(event) {\r\n    let target = event.target;\r\n    let accordion = target.parentNode\r\n\r\n    // 1. Check if the title was clicked\r\n    if (target.hasAttribute('data-control')) {\r\n\r\n      // 2. Open/Close the accordion\r\n      this.openClose(accordion);\r\n\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    this.cleanAccordionGroups.forEach( (cleanAccordionGroup) => {\r\n      const contents = cleanAccordionGroup.querySelectorAll('[data-content]');\r\n      contents.forEach( content => {\r\n        this.calculateContentHeight(content);\r\n      });\r\n    });\r\n  }\r\n\r\n  openClose(accordion) {\r\n    if (accordion.classList.contains('open')) {\r\n      this.close(accordion);\r\n    } else {\r\n      this.open(accordion);\r\n    }\r\n  }\r\n\r\n  calculateContentHeight(content) {\r\n    if (!content.parentNode.classList.contains('open')) return;\r\n\r\n    // 1. Set content height\r\n    content.style.maxHeight = `${content.scrollHeight}px`;\r\n\r\n    // 2. If this is a nested content recalculate all parent [data-content]\r\n    let tempContent = content.parentNode.closest('[data-content]');\r\n    while (tempContent !== null) {\r\n      tempContent.style.maxHeight = `${tempContent.scrollHeight + content.scrollHeight}px`;\r\n      tempContent = tempContent.parentNode.closest('[data-content]');\r\n    }\r\n\r\n  }\r\n  \r\n  /**\r\n   * Returns the computed height including margin of the passed element\r\n   * @param {object} element \r\n   */\r\n  getComputedHeight(element) {\r\n    let height = element.scrollHeight\r\n    let computedStyle = window.getComputedStyle(element);\r\n    let marginTop = parseInt(computedStyle.marginTop.replace('px', ''));\r\n    let marginBottom = parseInt(computedStyle.marginBottom.replace('px', ''));\r\n    return height + marginTop + marginBottom;\r\n  }\r\n\r\n  resetContentHeight(content) {\r\n    content.style.maxHeight = '';\r\n  }\r\n\r\n  /**\r\n   * Open an accordion\r\n   * @param {*} accordion The accordion to open \r\n   */\r\n  open(accordion) {\r\n    // 1. beforeOpen callback\r\n    this.options.beforeOpen(accordion);\r\n\r\n    // 2. Check option conditionals.\r\n    this.closeAll(accordion);\r\n\r\n    // 3. Open accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.add('open');\r\n    this.calculateContentHeight(content);\r\n    \r\n    // 4. afterOpen callback\r\n    this.options.afterOpen(accordion);\r\n  }\r\n\r\n  /**\r\n   * Close an accordion\r\n   * @param {*} accordion The accordion to close\r\n   */\r\n  close(accordion) {\r\n\r\n    // 1. beforeClose callback\r\n    this.options.beforeClose(accordion);\r\n\r\n    // 2. Close accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.remove('open');\r\n    this.resetContentHeight(content);\r\n\r\n    // 3. afterClose callback\r\n    this.options.afterClose(accordion);\r\n  }\r\n\r\n  /**\r\n   * Closes each accordion.\r\n   * @param {*} accordion The current accordion.\r\n   */\r\n  closeAll(accordion) {\r\n\r\n    // 1. Check if data options were passed.\r\n    let accordionGroup = accordion.parentNode;\r\n    let dataOptions = this.getDataOptions(accordionGroup);\r\n\r\n    if ('singleOpen' in dataOptions) {\r\n      if (dataOptions.singleOpen === false) return;\r\n    } else {\r\n      if (!this.options.singleOpen) return;\r\n    }\r\n\r\n    // 2. Proceed closing accordions\r\n    let accordions = accordionGroup.querySelectorAll('[data-accordion]');\r\n\r\n    accordions.forEach( (accordion) => {\r\n      this.close(accordion);\r\n    });\r\n  }\r\n\r\n  getDataOptions(accordionGroup) {\r\n    let dataOptions = {};\r\n    if (accordionGroup.hasAttribute('data-options')) {\r\n      dataOptions = JSON.parse(accordionGroup.dataset.options);\r\n    }\r\n    return dataOptions;\r\n  }\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  debounce(func, wait, immediate) {\r\n    var timeout;\r\n    return function() {\r\n      var context = this, args = arguments;\r\n      var later = function() {\r\n        timeout = null;\r\n        if (!immediate) func.apply(context, args);\r\n      };\r\n      var callNow = immediate && !timeout;\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n      if (callNow) func.apply(context, args);\r\n    };\r\n  };\r\n}"]}
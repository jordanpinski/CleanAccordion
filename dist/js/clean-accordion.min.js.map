{"version":3,"sources":["scripts.js","components/clean-accordion.js"],"names":["document","addEventListener","event","window","NodeList","prototype","forEach","NAME","VERSION","CleanAccordion","cleanAccordionGroups","arguments","length","undefined","options","_classCallCheck","this","defaultOptions","_name","_version","toFixed","singleOpen","beforeOpen","afterOpen","_objectSpread","debounce","handleResize","bind","cleanAccordion","accordion","_this","handleAccordionClick","target","parentNode","hasAttribute","openClose","_this2","cleanAccordionGroup","querySelectorAll","calculateContentHeight","content","classList","contains","close","open","height","Array","slice","call","children","child","scrollHeight","firstChildStyle","currentStyle","getComputedStyle","firstChildHeight","replace","contents","style","maxHeight","concat","closeAll","querySelector","parseInt","beforeClose","remove","resetContentHeight","_this3","accordionGroup","dataOptions","getDataOptions","JSON","parse","dataset","func","wait","immediate","timeout","context","accordions","clearTimeout","setTimeout","apply","args","callNow"],"mappings":"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","file":"clean-accordion.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function(event) {\r\n\r\n  // Polyfills\r\n  if (window.NodeList && !NodeList.prototype.forEach) {\r\n    NodeList.prototype.forEach = Array.prototype.forEach;\r\n  }\r\n\r\n});\r\n","const NAME = \"CleanAccordion\";\r\nconst VERSION = 1.0;\r\n\r\nclass CleanAccordion {\r\n  constructor(cleanAccordionGroups = [], options = {}) {\r\n    this.cleanAccordionGroups = cleanAccordionGroups;\r\n    if (this.cleanAccordionGroups.length <= 0) return;\r\n\r\n    const defaultOptions = {\r\n      _name: NAME,\r\n      _version: VERSION.toFixed(1),\r\n      singleOpen: true,                 // Should only one accordion be open at a time?\r\n      beforeOpen: (accordion) => {},\r\n      afterOpen: (accordion) => {},\r\n      beforeClose: (accordion) => {},\r\n      afterClose: (accordion) => {}\r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...options }\r\n    this.handleResize = this.debounce(this.handleResize.bind(this), 100);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.bindEvents();\r\n  }\r\n\r\n  bindEvents() {\r\n\r\n    // cleanAccordionGroup click events\r\n    this.cleanAccordionGroups.forEach( (cleanAccordion) => {\r\n      cleanAccordion.addEventListener('click', (event) => { this.handleAccordionClick(event) });\r\n    });\r\n\r\n    // Resizing\r\n    window.addEventListener('resize', () => { this.handleResize() })\r\n  }\r\n\r\n  handleAccordionClick(event) {\r\n    let target = event.target;\r\n    let accordion = target.parentNode\r\n\r\n    // 1. Check if the title was clicked\r\n    if (target.hasAttribute('data-title')) {\r\n\r\n      // 2. Open/Close the accordion\r\n      this.openClose(accordion);\r\n\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    this.cleanAccordionGroups.forEach( (cleanAccordionGroup) => {\r\n      const contents = cleanAccordionGroup.querySelectorAll('[data-content]');\r\n      contents.forEach( content => {\r\n        this.calculateContentHeight(content);\r\n      });\r\n    });\r\n  }\r\n\r\n  openClose(accordion) {\r\n    if (accordion.classList.contains('open')) {\r\n      this.close(accordion);\r\n    } else {\r\n      this.open(accordion);\r\n    }\r\n  }\r\n\r\n  calculateContentHeight(content) {\r\n    if (!content.parentNode.classList.contains('open')) return;\r\n    let height = 0;\r\n\r\n    const children = Array.prototype.slice.call(content.children);\r\n\r\n    children.forEach( (child) => {\r\n      height += child.scrollHeight;\r\n\r\n      // Add the top margin of first child\r\n      let firstChildStyle = child.children[0].currentStyle || window.getComputedStyle(child.children[0]);\r\n      let firstChildHeight = parseInt(firstChildStyle.marginTop.replace('px', ''));\r\n      height += firstChildHeight;\r\n    });\r\n      \r\n    content.style.maxHeight = `${height}px`;\r\n  }\r\n\r\n  resetContentHeight(content) {\r\n    content.style.maxHeight = '';\r\n  }\r\n\r\n  /**\r\n   * Open an accordion\r\n   * @param {*} accordion The accordion to open \r\n   */\r\n  open(accordion) {\r\n    // 1. beforeOpen callback\r\n    this.options.beforeOpen(accordion);\r\n\r\n    // 2. Check option conditionals.\r\n    this.closeAll(accordion);\r\n\r\n    // 3. Open accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.add('open');\r\n    this.calculateContentHeight(content);\r\n    \r\n    // 4. afterOpen callback\r\n    this.options.afterOpen(accordion);\r\n  }\r\n\r\n  /**\r\n   * Close an accordion\r\n   * @param {*} accordion The accordion to close\r\n   */\r\n  close(accordion) {\r\n\r\n    // 1. beforeClose callback\r\n    this.options.beforeClose(accordion);\r\n\r\n    // 2. Close accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.remove('open');\r\n    this.resetContentHeight(content);\r\n\r\n    // 3. afterClose callback\r\n    this.options.afterClose(accordion);\r\n  }\r\n\r\n  /**\r\n   * Closes each accordion.\r\n   * @param {*} accordion The current accordion.\r\n   */\r\n  closeAll(accordion) {\r\n\r\n    // 1. Check if data options were passed.\r\n    let accordionGroup = accordion.parentNode;\r\n    let dataOptions = this.getDataOptions(accordionGroup);\r\n\r\n    if ('singleOpen' in dataOptions) {\r\n      if (dataOptions.singleOpen === false) return;\r\n    } else {\r\n      if (!this.options.singleOpen) return;\r\n    }\r\n\r\n    // 2. Proceed closing accordions\r\n    let accordions = accordionGroup.querySelectorAll('[data-accordion]');\r\n\r\n    accordions.forEach( (accordion) => {\r\n      this.close(accordion);\r\n    });\r\n  }\r\n\r\n  getDataOptions(accordionGroup) {\r\n    let dataOptions = {};\r\n    if (accordionGroup.hasAttribute('data-options')) {\r\n      dataOptions = JSON.parse(accordionGroup.dataset.options);\r\n    }\r\n    return dataOptions;\r\n  }\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  debounce(func, wait, immediate) {\r\n    var timeout;\r\n    return function() {\r\n      var context = this, args = arguments;\r\n      var later = function() {\r\n        timeout = null;\r\n        if (!immediate) func.apply(context, args);\r\n      };\r\n      var callNow = immediate && !timeout;\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n      if (callNow) func.apply(context, args);\r\n    };\r\n  };\r\n}"]}
{"version":3,"sources":["scripts.js","components/clean-accordion.js"],"names":["document","addEventListener","event","window","NodeList","prototype","forEach","Object","Test","arguments","length","undefined","NAME","VERSION","CleanAccordion","cleanAccordionGroups","options","_classCallCheck","this","handleResize","debounce","bind","_version","toFixed","singleOpen","beforeOpen","afterOpen","beforeClose","afterClose","_this","cleanAccordion","handleAccordionClick","target","accordion","parentNode","hasAttribute","_this2","cleanAccordionGroup","querySelectorAll","content","calculateContentHeight","classList","contains","open","openClose","height","call","contents","child","firstChildStyle","children","currentStyle","getComputedStyle","firstChildHeight","parseInt","marginTop","replace","style","maxHeight","concat","querySelector","add","_this3","accordionGroup","dataOptions","close","parse","func","wait","immediate","timeout","accordions","context","callNow","clearTimeout","setTimeout","apply","args","test","console","log"],"mappings":"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","file":"scripts.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function(event) {\n\n  // Polyfills\n  if (window.NodeList && !NodeList.prototype.forEach) {\n    NodeList.prototype.forEach = Array.prototype.forEach;\n  }\n\n  Object.prototype.Test = (options = {}) => { new Test(options) };\n  let test = document.querySelector('h3');\n\n  test.Test();\n});\n","const NAME = \"CleanAccordion\";\r\nconst VERSION = 1.0;\r\n\r\nclass CleanAccordion {\r\n  constructor(cleanAccordionGroups = [], options = {}) {\r\n    this.cleanAccordionGroups = cleanAccordionGroups;\r\n    if (this.cleanAccordionGroups.length <= 0) return;\r\n\r\n    this.handleResize = this.debounce(this.handleResize.bind(this), 100);\r\n\r\n    this.options = {\r\n      _name: NAME,\r\n      _version: VERSION.toFixed(1),\r\n      singleOpen: true,                 // Should only one accordion be open at a time?\r\n      beforeOpen: (accordion) => {},\r\n      afterOpen: (accordion) => {},\r\n      beforeClose: (accordion) => {},\r\n      afterClose: (accordion) => {}\r\n    }\r\n\r\n    if (Object.keys(options).length > 0) {\r\n      Object.assign(this.options, options);\r\n    }\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.bindEvents();\r\n  }\r\n\r\n  bindEvents() {\r\n\r\n    // cleanAccordionGroup click events\r\n    this.cleanAccordionGroups.forEach( (cleanAccordion) => {\r\n      cleanAccordion.addEventListener('click', (event) => { this.handleAccordionClick(event) });\r\n    });\r\n\r\n    // Resizing\r\n    window.addEventListener('resize', () => { this.handleResize() })\r\n  }\r\n\r\n  handleAccordionClick(event) {\r\n    let target = event.target;\r\n    let accordion = target.parentNode\r\n\r\n    // 1. Check if the title was clicked\r\n    if (target.hasAttribute('data-title')) {\r\n\r\n      // 2. Open/Close the accordion\r\n      this.openClose(accordion);\r\n\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    this.cleanAccordionGroups.forEach( (cleanAccordionGroup) => {\r\n      const contents = cleanAccordionGroup.querySelectorAll('[data-content]');\r\n      contents.forEach( content => {\r\n        this.calculateContentHeight(content);\r\n      });\r\n    });\r\n  }\r\n\r\n  openClose(accordion) {\r\n    if (accordion.classList.contains('open')) {\r\n      this.close(accordion);\r\n    } else {\r\n      this.open(accordion);\r\n    }\r\n  }\r\n\r\n  calculateContentHeight(content) {\r\n    if (!content.parentNode.classList.contains('open')) return;\r\n    let height = 0;\r\n\r\n    const children = Array.prototype.slice.call(content.children);\r\n\r\n    children.forEach( (child) => {\r\n      height += child.scrollHeight;\r\n\r\n      // Add the top margin of first child\r\n      let firstChildStyle = child.children[0].currentStyle || window.getComputedStyle(child.children[0]);\r\n      let firstChildHeight = parseInt(firstChildStyle.marginTop.replace('px', ''));\r\n      height += firstChildHeight;\r\n    });\r\n      \r\n    content.style.maxHeight = `${height}px`;\r\n  }\r\n\r\n  resetContentHeight(content) {\r\n    content.style.maxHeight = '';\r\n  }\r\n\r\n  /**\r\n   * Open an accordion\r\n   * @param {*} accordion The accordion to open \r\n   */\r\n  open(accordion) {\r\n    // 1. beforeOpen callback\r\n    this.options.beforeOpen(accordion);\r\n\r\n    // 2. Check option conditionals.\r\n    this.closeAll(accordion);\r\n\r\n    // 3. Open accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.add('open');\r\n    this.calculateContentHeight(content);\r\n    \r\n    // 4. afterOpen callback\r\n    this.options.afterOpen(accordion);\r\n  }\r\n\r\n  /**\r\n   * Close an accordion\r\n   * @param {*} accordion The accordion to close\r\n   */\r\n  close(accordion) {\r\n\r\n    // 1. beforeClose callback\r\n    this.options.beforeClose(accordion);\r\n\r\n    // 2. Close accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.remove('open');\r\n    this.resetContentHeight(content);\r\n\r\n    // 3. afterClose callback\r\n    this.options.afterClose(accordion);\r\n  }\r\n\r\n  /**\r\n   * Closes each accordion.\r\n   * @param {*} accordion The current accordion.\r\n   */\r\n  closeAll(accordion) {\r\n\r\n    // 1. Check if data options were passed.\r\n    let accordionGroup = accordion.parentNode;\r\n    let dataOptions = this.getDataOptions(accordionGroup);\r\n\r\n    if ('singleOpen' in dataOptions) {\r\n      if (dataOptions.singleOpen === false) return;\r\n    } else {\r\n      if (!this.options.singleOpen) return;\r\n    }\r\n\r\n    // 2. Proceed closing accordions\r\n    let accordions = accordionGroup.querySelectorAll('[data-accordion]');\r\n\r\n    accordions.forEach( (accordion) => {\r\n      this.close(accordion);\r\n    });\r\n  }\r\n\r\n  getDataOptions(accordionGroup) {\r\n    let dataOptions = {};\r\n    if (accordionGroup.hasAttribute('data-options')) {\r\n      dataOptions = JSON.parse(accordionGroup.dataset.options);\r\n    }\r\n    return dataOptions;\r\n  }\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  debounce(func, wait, immediate) {\r\n    var timeout;\r\n    return function() {\r\n      var context = this, args = arguments;\r\n      var later = function() {\r\n        timeout = null;\r\n        if (!immediate) func.apply(context, args);\r\n      };\r\n      var callNow = immediate && !timeout;\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n      if (callNow) func.apply(context, args);\r\n    };\r\n  };\r\n}\r\n\r\nclass Test {\r\n  constructor(options = {}) {\r\n    this.test = this;\r\n    console.log({options})\r\n  }\r\n}"]}